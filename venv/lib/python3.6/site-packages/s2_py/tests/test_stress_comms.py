#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created by gregory on 01.02.18

Copyright 2018 Alpes Lasers SA, Neuchatel, Switzerland
"""


from s2_py import serial_open, serial_close, s2_serial_setup, s2_check_API_compatible, S2_BAUD, NULL, s2_query_info, S2_info
import logging
from collections import defaultdict
import time

logging.getLogger().setLevel(logging.INFO)
from s2_local_settings import s2_port_name

s2port = serial_open(s2_port_name.encode('utf-8'))
if s2port==NULL:
    logging.error('can not connect to S2')
    exit(1)
s2_serial_setup(s2port, S2_BAUD)

s2i = S2_info()
start = time.time()
N = 0
bad_count = 0
elapsed = 0
return_values = defaultdict(int)

print('Port name: {}'.format(s2_port_name))
try:
    while True:
        ret = s2_query_info(s2port, s2i)
        N += 1
        return_values[ret] += 1
        if ret != 0:
            bad_count += 1
        elapsed = time.time() - start
        print("\rTotal count: {}; errors: {} [{:.2f}%]; time: {:.1f}s [loop time: {:.2g}s]".format(
            N, bad_count, 100.0 * float(bad_count) / float(N), elapsed, elapsed / N), end='')
except KeyboardInterrupt:
    pass
finally:
    print("\nS2 #{}; fw v{}".format(s2i.device_id, s2i.sw_version))
    # print("Total count: {}; errors: {} [{:.2f}%]; time: {:.1f}s [loop time: {:.2g}s]".format(
    #     N, bad_count, 100*float(bad_count) / float(N), elapsed, elapsed / N))
    del return_values[0]
    if return_values:
        print('Error codes:')
        for i in return_values:
            print('{} -> {} occurences'.format(i, return_values[i]))
    serial_close(s2port)
