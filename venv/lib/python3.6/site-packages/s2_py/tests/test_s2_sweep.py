# -*- coding: utf-8 -*-
"""
Created by gregory on 27.06.16

Copyright 2016 Alpes Lasers SA, Neuchatel, Switzerland
"""

import logging
from collections import namedtuple
import time

from s2_py.driver import PulserDriver
from s2_settings import s2_port_name

logger = logging.getLogger(__name__)

__author__ = 'gregory'
__copyright__ = "Copyright 2016, Alpes Lasers SA"


IVPoint = namedtuple('IVPoint', ['imeas', 'vmeas', 'vset', 'time'])


def sweep_iv(imax, toffset=0, vstart=0.0, dv=0.001, imin=0.15, p=None):
    start = time.time() - toffset
    measures = []
    inoise = 0.003
    vset = vstart
    s = p.get_settings()
    # prev_settings = s.to_dict()
    s.set_output_current_limit(imax + inoise * 2)
    s.set_pulsing_mode('internal')
    s.set_output_voltage(vset)
    p.set_settings(s)
    p.wait_ready()
    while True:
        s.set_output_voltage(vset)
        p.set_settings(s)
        # p.wait_ready()
        # time.sleep(0.1)
        info = p.get_info().to_dict()
        if info['status'] != 'ok':
            raise Exception('S2 status ' + info['status'])
        imeas, vmeas = info['measured_current'], info['measured_voltage']
        if imin < imeas < imax:
            t = time.time() - start
            pt = IVPoint(imeas=imeas, vmeas=vmeas, vset=vset, time=t)
            measures.append(pt)
        if imeas > imax:
            break
        vset += dv
    return measures


if __name__ == '__main__':
    p = PulserDriver(s2_port_name)
    p.open()
    sweep_iv(0.1, 0, 0.0, p=p)