# -*- coding: utf-8 -*-
"""
Created by chiesa on 28.08.15

Copyright 2015 Alpes Lasers SA, Neuchatel, Switzerland
"""
import threading
from time import sleep
import time
from matplotlib import pyplot
from s2_py.driver import PulserDriver

__author__ = 'chiesa'
__copyright__ = "Copyright 2015, Alpes Lasers SA"


class MeasureMaker(object):

    def __init__(self, pulser):
        self.pulser = pulser
        self._stopped = False
        self.data = []

    def run(self):
        while not self._stopped:
            self.data.append(dict(time=time.time(),
                                  data=self.pulser.get_info().to_dict()))
            sleep(0.01)

    def stop(self):
        self._stopped = True

if __name__ == '__main__':
    port_name = '/dev/ttyS1'
    p = PulserDriver(port_name)
    meas = None
    try:
        p.open()
        p.set_up()
        print("set up")
        print(p.get_info().to_dict())
        s = p.get_settings()
        print(s.to_dict())
        s.set_pulsing_mode("internal")
        s.set_pulse_width(300)
        s.set_pulse_period(10000)
        s.set_output_voltage(1.0)
        meas = MeasureMaker(pulser=p)
        t = threading.Thread(target=meas.run)
        t.start()
        p.set_settings(s)
        sleep(1.0)
        s = p.get_settings()
        s.set_output_voltage(2.0)
        p.set_settings(s)
        sleep(1.0)
        s.set_output_voltage(0.5)
        p.set_settings(s)
        sleep(2.0)
        meas.stop()
        print(len(meas.data))
        fig1 = pyplot.figure()
        ax1 = fig1.add_subplot(111)
        ax1twin = ax1.twinx()
        ax1.plot([d['time'] - meas.data[0]['time'] for d in meas.data],
                 [d['data']['measured_voltage'] for d in meas.data])
        ax1.set_xlabel('Time [s]')
        ax1.set_ylabel('Measured Voltage [V]')
        ax1.axvline(1.0, color='red')
        ax1.axvline(2.0, color='red')
        ax1twin.plot([d['time'] - meas.data[0]['time'] for d in meas.data],
                     [d['data']['measured_current'] for d in meas.data],
                     color='green')
        ax1twin.set_ylabel('Measured Current [A]')
        pyplot.show()
    finally:
        if meas:
            meas.stop()
        p.close()

